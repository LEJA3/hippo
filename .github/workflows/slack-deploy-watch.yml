name: Slack Deployment Watcher

on:
  repository_dispatch:
    types:
      - slack-deploy-watch

jobs:

  integrity:
    name: Integrity Check
    runs-on: ubuntu-latest
    timeout-minutes: 1

    steps:

      #
      # Validate that the origin is from Slack
      # See: https://api.slack.com/authentication/verifying-requests-from-slack
      #
      - name: Validate Origin
        uses: actions/github-script@v4.0.2
        env:
          AGENT: ${{ github.event.client_payload.integrity.agent }}
          BODY: ${{ github.event.client_payload.integrity.body }}
          TIMESTAMP: ${{ github.event.client_payload.integrity.timestamp }}
          SIGNATURE: ${{ github.event.client_payload.integrity.signature }}
          SIGNING_SECRET: ${{ secrets.SLACK_SIGNING_SECRET }}
        with:
          script: |
            if(!`${process.env.AGENT}`.startsWith("Slackbot")){
                core.setFailed("User agent mismatch.")
            } else {
                const base = `v0:${process.env.TIMESTAMP}:${process.env.BODY}`
                const hash = require('crypto').createHmac('sha256', `${process.env.SIGNING_SECRET}`).update(base).digest("hex")
                if(`${process.env.SIGNATURE}` !== `v0=${hash}`) {
                  core.setFailed("The origin integrity check failed.")
                }
            }

  build:
    name: Check deploy status
    needs: integrity
    runs-on: ubuntu-latest
    timeout-minutes: 1
    env:
      CHANNEL_ID: ${{ github.event.client_payload.data.channel_id }}
      SLACK_WEBHOOK: ${{  secrets.SLACK_WEBHOOK }}

    steps:

      #
      # Identify target server
      #
      - name: Identify target
        uses: actions/github-script@v4.0.2
        id: find-target
        with:
          result-encoding: string
          script: |
            const environments = {
              C011BKDNUS1: "jobs/dev",
              C01119ANCJE: "jobs/test",
              C01119BULFL: "jobs/training",
              C01T1PKNP3L: "job/cs"
            }
            if(environments[`${ process.github.event.client_payload.data.channel_id }`] === undefined) {
              core.setFailed("No target environment has been identifed.")
            }
            if (${ process.github.event.client_payload.data.status == "failed" }) {
              core.setFailed("Deployment failed.")
            }

      - name: Slack message (failed to identify the target)
        if: ${{ failure() }}
        uses: muinmomin/webhook-action@v1.0.0
        with:
          url: ${{ env.SLACK_WEBHOOK }}
          data: '{ "channel": "${{ env.CHANNEL_ID }}", "text": "Pipeline progress...", "attachments": [{ "text" : "Cannot find the target server. Are you running the command from the correct channel?",  "color": "#DA291C" }] }'
